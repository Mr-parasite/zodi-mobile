#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ZODI
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Desktop (Windows/macOS/Linux) –∏ Mobile –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
"""

import os
import sys
import platform
import json
import schedule
import time
from datetime import datetime, date
from typing import Optional, Dict, Any
import threading

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
try:
    import win10toast
    WINDOWS_TOAST_AVAILABLE = True
except ImportError:
    WINDOWS_TOAST_AVAILABLE = False

try:
    import pync
    MACOS_NOTIFICATIONS_AVAILABLE = True
except ImportError:
    MACOS_NOTIFICATIONS_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Linux
try:
    import subprocess
    LINUX_NOTIFICATIONS_AVAILABLE = True
except ImportError:
    LINUX_NOTIFICATIONS_AVAILABLE = False

from .zodiac_calculator import get_zodiac_sign
from .daily_manager import DailyPredictionManager
from .zodiac_data import ZODIAC_DATA


class NotificationSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ZODI"""
    
    def __init__(self):
        self.system = platform.system().lower()
        self.daily_manager = DailyPredictionManager()
        self.is_running = False
        self.notification_thread = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.settings = {
            'enabled': True,
            'time': '07:00',
            'show_detailed': True,
            'sound': True,
            'duration': 10  # —Å–µ–∫—É–Ω–¥
        }
    
    def get_daily_prediction_for_sign(self, zodiac_sign: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —á–µ—Ä–µ–∑ daily_manager
            prediction = self.daily_manager.get_daily_general_prediction(zodiac_sign)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            return {
                'sign': zodiac_sign,
                'date': date.today().strftime('%d.%m.%Y'),
                'general': prediction.get('general', ''),
                'love': prediction.get('love', ''),
                'career': prediction.get('career', ''),
                'health': prediction.get('health', ''),
                'finance': prediction.get('finance', ''),
                'advice': prediction.get('advice', ''),
                'opportunities': prediction.get('opportunities', ''),
                'warnings': prediction.get('warnings', '')
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            return {
                'sign': zodiac_sign,
                'date': date.today().strftime('%d.%m.%Y'),
                'general': '–°–µ–≥–æ–¥–Ω—è –∑–≤–µ–∑–¥—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å –æ—Å–æ–±—ã–µ —Å—é—Ä–ø—Ä–∏–∑—ã!',
                'love': '–í –ª—é–±–≤–∏ –≤–∞—Å –∂–¥—É—Ç –ø—Ä–∏—è—Ç–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã.',
                'career': '–ö–∞—Ä—å–µ—Ä–∞ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.',
                'health': '–ó–¥–æ—Ä–æ–≤—å–µ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è.',
                'finance': '–§–∏–Ω–∞–Ω—Å—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã.',
                'advice': '–°–ª—É—à–∞–π—Ç–µ —Å–≤–æ—é –∏–Ω—Ç—É–∏—Ü–∏—é.',
                'opportunities': '–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ.',
                'warnings': '–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –≤–∞–∂–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏.'
            }
    
    def create_notification_content(self, prediction: Dict[str, Any]) -> Dict[str, str]:
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        sign_symbol = ZODIAC_DATA.get(prediction['sign'], {}).get('symbol', 'üîÆ')
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        title = f"{sign_symbol} {prediction['sign']} - {prediction['date']}"
        
        if self.settings['show_detailed']:
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            content = f"üîÆ {prediction['general']}\n\n"
            content += f"üíñ –õ—é–±–æ–≤—å: {prediction['love']}\n"
            content += f"üíº –ö–∞—Ä—å–µ—Ä–∞: {prediction['career']}\n"
            content += f"üí∞ –§–∏–Ω–∞–Ω—Å—ã: {prediction['finance']}"
        else:
            # –ö—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            content = f"üîÆ {prediction['general']}"
        
        return {
            'title': title,
            'content': content,
            'icon': self._get_notification_icon_path()
        }
    
    def _get_notification_icon_path(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        # –ò—â–µ–º –∏–∫–æ–Ω–∫—É –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ assets
        icon_paths = [
            'zodi_app/assets/icon.ico',
            'assets/icon.ico',
            'icon.ico'
        ]
        
        for path in icon_paths:
            if os.path.exists(path):
                return os.path.abspath(path)
        
        return None
    
    def show_windows_notification(self, title: str, content: str, icon_path: Optional[str] = None):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Windows"""
        if not WINDOWS_TOAST_AVAILABLE:
            print("win10toast –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install win10toast")
            return False
        
        try:
            toaster = win10toast.ToastNotifier()
            toaster.show_toast(
                title=title,
                msg=content,
                icon_path=icon_path,
                duration=self.settings['duration'],
                threaded=True
            )
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Windows: {e}")
            return False
    
    def show_macos_notification(self, title: str, content: str, icon_path: Optional[str] = None):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ macOS"""
        if not MACOS_NOTIFICATIONS_AVAILABLE:
            print("pync –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pync")
            return False
        
        try:
            pync.notify(
                message=content,
                title=title,
                appIcon=icon_path,
                sound='default' if self.settings['sound'] else None
            )
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è macOS: {e}")
            return False
    
    def show_linux_notification(self, title: str, content: str, icon_path: Optional[str] = None):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Linux"""
        if not LINUX_NOTIFICATIONS_AVAILABLE:
            print("–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Linux –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return False
        
        try:
            cmd = ['notify-send', title, content]
            if icon_path and os.path.exists(icon_path):
                cmd.extend(['-i', icon_path])
            
            if self.settings['duration']:
                cmd.extend(['-t', str(self.settings['duration'] * 1000)])
            
            subprocess.run(cmd, check=True)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Linux: {e}")
            return False
    
    def show_notification(self, title: str, content: str, icon_path: Optional[str] = None) -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°"""
        if not self.settings['enabled']:
            return False
        
        if self.system == 'windows':
            return self.show_windows_notification(title, content, icon_path)
        elif self.system == 'darwin':  # macOS
            return self.show_macos_notification(title, content, icon_path)
        elif self.system == 'linux':
            return self.show_linux_notification(title, content, icon_path)
        else:
            print(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: {self.system}")
            return False
    
    def send_daily_notification(self, user_zodiac_sign: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = self.get_daily_prediction_for_sign(user_zodiac_sign)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_content = self.create_notification_content(prediction)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            success = self.show_notification(
                title=notification_content['title'],
                content=notification_content['content'],
                icon_path=notification_content['icon']
            )
            
            if success:
                print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {user_zodiac_sign}")
            else:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {user_zodiac_sign}")
            
            return success
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def start_daily_scheduler(self, user_zodiac_sign: str):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.is_running:
            print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule.every().day.at(self.settings['time']).do(
            self.send_daily_notification, user_zodiac_sign
        )
        
        self.is_running = True
        
        def run_scheduler():
            while self.is_running:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.notification_thread = threading.Thread(target=run_scheduler, daemon=True)
        self.notification_thread.start()
        
        print(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω. –í—Ä–µ–º—è: {self.settings['time']}")
    
    def stop_daily_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.is_running = False
        schedule.clear()
        print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def update_settings(self, new_settings: Dict[str, Any]):
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.settings.update(new_settings)
        print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {self.settings}")
    
    def test_notification(self, user_zodiac_sign: str):
        """–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        print("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        return self.send_daily_notification(user_zodiac_sign)
    
    def save_settings_to_file(self, file_path: str = "notification_settings.json"):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(self.settings, f, ensure_ascii=False, indent=2)
            print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def load_settings_from_file(self, file_path: str = "notification_settings.json"):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    self.settings.update(json.load(f))
                print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {file_path}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")


class MobileNotificationSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
    
    def __init__(self):
        self.fcm_available = False
        self.apns_available = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
        self._check_mobile_services()
    
    def _check_mobile_services(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Firebase Cloud Messaging
            import firebase_admin
            from firebase_admin import messaging
            self.fcm_available = True
        except ImportError:
            print("Firebase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install firebase-admin")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Apple Push Notifications
            import apns2
            self.apns_available = True
        except ImportError:
            print("APNS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install apns2")
    
    def send_android_notification(self, device_token: str, title: str, content: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ Android —á–µ—Ä–µ–∑ FCM"""
        if not self.fcm_available:
            print("FCM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        try:
            from firebase_admin import messaging
            
            message = messaging.Message(
                notification=messaging.Notification(
                    title=title,
                    body=content
                ),
                token=device_token
            )
            
            response = messaging.send(message)
            print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response}")
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def send_ios_notification(self, device_token: str, title: str, content: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ iOS —á–µ—Ä–µ–∑ APNS"""
        if not self.apns_available:
            print("APNS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        try:
            from apns2 import APNsClient, Notification
            
            client = APNsClient()
            
            notification = Notification(
                device_token=device_token,
                alert=title,
                body=content,
                badge=1,
                sound='default'
            )
            
            client.send_notification(notification)
            print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ iOS")
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ APNS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False


def create_system_scheduler_script(user_zodiac_sign: str, script_path: str = "zodi_notifications.py"):
    """–°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    
    script_content = f'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ZODI
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º ZODI
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from zodi_app.core.notification_system import NotificationSystem

def main():
    notification_system = NotificationSystem()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    notification_system.load_settings_from_file()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    success = notification_system.send_daily_notification("{user_zodiac_sign}")
    
    if success:
        print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ZODI –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ZODI")

if __name__ == "__main__":
    main()
'''
    
    try:
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(script_content)
        print(f"–°–∫—Ä–∏–ø—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–æ–∑–¥–∞–Ω: {script_path}")
        return script_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        return None


def setup_windows_task_scheduler(user_zodiac_sign: str, script_path: str):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á Windows"""
    try:
        import subprocess
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ Windows
        task_name = "ZODI Daily Notifications"
        command = f'python "{script_path}"'
        
        # –°–æ–∑–¥–∞–µ–º XML –¥–ª—è –∑–∞–¥–∞—á–∏
        xml_content = f'''<?xml version="1.0" encoding="UTF-16"?>
<Task version="1.2" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task">
  <Triggers>
    <CalendarTrigger>
      <StartBoundary>2024-01-01T07:00:00</StartBoundary>
      <Enabled>true</Enabled>
      <ScheduleByDay>
        <DaysInterval>1</DaysInterval>
      </ScheduleByDay>
    </CalendarTrigger>
  </Triggers>
  <Actions>
    <Exec>
      <Command>python</Command>
      <Arguments>"{script_path}"</Arguments>
    </Exec>
  </Actions>
</Task>'''
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º XML
        xml_path = "zodi_task.xml"
        with open(xml_path, 'w', encoding='utf-16') as f:
            f.write(xml_content)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        subprocess.run(['schtasks', '/create', '/tn', task_name, '/xml', xml_path], check=True)
        
        print(f"–ó–∞–¥–∞—á–∞ Windows —Å–æ–∑–¥–∞–Ω–∞: {task_name}")
        print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:00")
        
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Windows –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        return False


def setup_macos_launchd(user_zodiac_sign: str, script_path: str):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Launchd –¥–ª—è macOS"""
    try:
        plist_content = f'''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.zodi.notifications</string>
    <key>ProgramArguments</key>
    <array>
        <string>python3</string>
        <string>{script_path}</string>
    </array>
    <key>StartCalendarInterval</key>
    <dict>
        <key>Hour</key>
        <integer>7</integer>
        <key>Minute</key>
        <integer>0</integer>
    </dict>
    <key>RunAtLoad</key>
    <false/>
</dict>
</plist>'''
        
        plist_path = os.path.expanduser("~/Library/LaunchAgents/com.zodi.notifications.plist")
        
        with open(plist_path, 'w') as f:
            f.write(plist_content)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á—É
        subprocess.run(['launchctl', 'load', plist_path], check=True)
        
        print(f"Launchd –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {plist_path}")
        print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:00")
        
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ macOS Launchd: {e}")
        return False


def setup_linux_cron(user_zodiac_sign: str, script_path: str):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Cron –¥–ª—è Linux"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ crontab
        cron_entry = f"0 7 * * * python3 {script_path}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π crontab
        result = subprocess.run(['crontab', '-l'], capture_output=True, text=True)
        current_crontab = result.stdout if result.returncode == 0 else ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        if "zodi_notifications.py" not in current_crontab:
            new_crontab = current_crontab + f"\n{cron_entry}\n"
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π crontab
            subprocess.run(['crontab', '-'], input=new_crontab, text=True, check=True)
            
            print("Cron –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:00")
            
            return True
        else:
            print("Cron –∑–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Linux Cron: {e}")
        return False


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    notification_system = NotificationSystem()
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notification_system.test_notification("–°–∫–æ—Ä–ø–∏–æ–Ω")
