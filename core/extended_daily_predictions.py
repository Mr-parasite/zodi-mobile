#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ZODI - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
7 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
"""

import json
import os
import random
from datetime import datetime
from typing import Dict, List

class ExtendedDailyPredictions:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å 7 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    
    def __init__(self, zodiac_sign: str):
        self.zodiac_sign = zodiac_sign
        self.categories = {
            'love': "üíñ –õ–∏—á–Ω–∞—è –∂–∏–∑–Ω—å",
            'career': "üíº –ö–∞—Ä—å–µ—Ä–∞", 
            'finance': "üí∞ –§–∏–Ω–∞–Ω—Å—ã",
            'health': "üè• –ó–¥–æ—Ä–æ–≤—å–µ",
            'growth': "üéØ –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç",
            'energy': "üåô –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –¥–Ω—è",
            'warnings': "‚ö†Ô∏è –ü—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏—è"
        }
        self.predictions_db = self._load_predictions_database()
    
    def _load_predictions_database(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ1)
        db_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'extended_predictions_quality.json')
        
        try:
            with open(db_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –±–∞–∑–∞ –∏–º–µ–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å metadata –∏ predictions
                if 'predictions' in data:
                    return data['predictions']
                return data
        except FileNotFoundError:
            # –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ2)
            db_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'extended_predictions_unified.json')
        
        try:
            with open(db_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –±–∞–∑–∞ –∏–º–µ–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å metadata –∏ predictions
                if 'predictions' in data:
                    return data['predictions']
                return data
        except FileNotFoundError:
            # –ï—Å–ª–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –ø–æ–ª–Ω—É—é –º–µ–≥–∞-–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –∑–Ω–∞–∫–æ–≤
            db_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'extended_predictions_mega_all.json')
            try:
                with open(db_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except FileNotFoundError:
                # –ï—Å–ª–∏ –ø–æ–ª–Ω–∞—è –º–µ–≥–∞-–±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –º–µ–≥–∞-–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                db_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'extended_predictions_mega_complete.json')
                try:
                    with open(db_path, 'r', encoding='utf-8') as f:
                        return json.load(f)
                except FileNotFoundError:
                    # –ï—Å–ª–∏ –º–µ–≥–∞-–±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –ø–æ–ª–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    db_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'extended_predictions_complete.json')
                    try:
                        with open(db_path, 'r', encoding='utf-8') as f:
                            return json.load(f)
                    except FileNotFoundError:
                        # –ï—Å–ª–∏ –ø–æ–ª–Ω–∞—è –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é
                        db_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'extended_predictions_db.json')
                        try:
                            with open(db_path, 'r', encoding='utf-8') as f:
                                return json.load(f)
                        except FileNotFoundError:
                            # –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                            return self._create_fallback_predictions()
    
    def _create_fallback_predictions(self) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"""
        return {
            self.zodiac_sign: {
                'love': [f"–í–∞—à–∞ –ª–∏—á–Ω–∞—è –∂–∏–∑–Ω—å –¥–ª—è {self.zodiac_sign} —Å–µ–≥–æ–¥–Ω—è..."],
                'career': [f"–ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –¥–ª—è {self.zodiac_sign}..."],
                'finance': [f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è {self.zodiac_sign}..."],
                'health': [f"–ó–¥–æ—Ä–æ–≤—å–µ –∏ —ç–Ω–µ—Ä–≥–∏—è –¥–ª—è {self.zodiac_sign}..."],
                'growth': [f"–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç –¥–ª—è {self.zodiac_sign}..."],
                'energy': [f"–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –¥–Ω—è –¥–ª—è {self.zodiac_sign}..."],
                'warnings': [f"–ü—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏—è –¥–ª—è {self.zodiac_sign}..."]
            }
        }
    
    def get_detailed_predictions(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        predictions = {}
        
        if self.zodiac_sign in self.predictions_db:
            sign_data = self.predictions_db[self.zodiac_sign]
            
            for category_key, category_name in self.categories.items():
                if category_key in sign_data and sign_data[category_key]:
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
                    prediction_list = sign_data[category_key]
                    selected_prediction = random.choice(prediction_list)
                    predictions[category_key] = selected_prediction
                else:
                    # Fallback –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                    predictions[category_key] = f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
        else:
            # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
            for category_key, category_name in self.categories.items():
                predictions[category_key] = f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {category_name} –¥–ª—è {self.zodiac_sign} –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        
        return predictions
    
    def get_category_prediction(self, category: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        all_predictions = self.get_detailed_predictions()
        return all_predictions.get(category, "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
    
    def get_categories_info(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"""
        return self.categories
    
    def get_random_prediction(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–∑ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        all_predictions = self.get_detailed_predictions()
        if all_predictions:
            category = random.choice(list(all_predictions.keys()))
            return f"{self.categories[category]}: {all_predictions[category]}"
        return "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
